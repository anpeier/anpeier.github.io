<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速上手网易云音乐可视化</title>
      <link href="/2019/11/23/visualize/"/>
      <url>/2019/11/23/visualize/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是音频可视化"><a href="#什么是音频可视化" class="headerlink" title="什么是音频可视化"></a>什么是音频可视化</h2><blockquote><p>音频可视化，顾名思义，就是通过获取音频的波形、频率和其他来自音频的数据转换成图像，再到屏幕上显示出来。通过它，我们能够制作一些炫酷的前端音乐界面。</p></blockquote><p>下面，我将分析一个来自<a href="https://juejin.im/post/5d8c122be51d4578176b4b2b" target="_blank" rel="noopener">云音乐技术团队的音频可视化开发案例</a>，快速帮助小白，制作自己喜欢的炫酷的音频可视化界面。</p><p>先上图</p><p><img src="/2019/11/23/visualize/1.png" alt></p><p>想开发这么一个炫酷的音频界面，我们可以先来聊聊 <strong>canvas</strong></p><h2 id="canvas是什么"><a href="#canvas是什么" class="headerlink" title="canvas是什么"></a>canvas是什么</h2><p><strong>canvas</strong>是HTML5中用于图形绘制的容器元素，它通常通过JavaScript脚本来完成图形绘制。要完成我们下面的音频可视化开发，我们可以借组结构canvas的几个方法，下面将通过开发一个页面倒计时的小案例来帮助初学者了解canvas的一些属性和方法。</p><p>先上代码</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>canvas id<span class="token operator">=</span><span class="token string">"myCanvas"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"50px Verdana"</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> dis <span class="token operator">=</span> <span class="token number">550</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>dis <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token operator">--</span>dis<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token operator">%</span><span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                    ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>我们在<code>html</code>页面创建一个<code>canvas</code>画布元素并设置id为<code>myCanvas</code>，它的默认大小是300*150，创建好了这块画布，接下来我们就能在JavaScript脚本中绘制图形了。</p><p>先通过<code>getElementById()</code>找到这个元素，然后创建canvas对象<code>ctx</code>并设置填充色为红色，字体为Verdana，大小为50px，设置<code>dis</code>变量用于条件控制，再定义一个<code>i</code>变量用于显示倒计时数字，然后我们就可以开始在我们的画布里绘制倒计时数字了。</p><p>创建一个<code>animation</code>函数，在这个函数里面，我们使用了一个html5专门用于请求动画的API<code>requestAnimationFrame</code>请求动画帧，相比于定时器<code>setTimeout</code>，它不会引起丢帧、丢帧，看起来更加流畅。</p><p>在<code>requestAnimationFrame</code>里面，先设置刷帧条件<code>dis&gt;=0</code>，<code>dis</code>每次减一，总共550次，再设置条件为每50次执行一次绘制操作，在每次绘制之前，通过<code>clearRect(x,y,width,height)</code>方法将画布上给定矩形清空，它的4个参数分别表示要清除的矩形左上角的x，y坐标，以及要清空矩形的宽度和高度，单位以像素计算。然后再通过<code>fillText()</code>画布指定位置绘制倒计时数字,该方法接收四个参数：<code>text</code>输出的文本，<code>x</code>绘制文本的x坐标，<code>y</code>绘制文本的y坐标，注意：这两个值都是相对于画布，最后一个参数<code>maxWidth</code>表示允许文本的最大宽度，它是一个可选参数。</p><p>接着我们通过递归的方式调用<code>animation()</code>函数直到倒计时结束，最后在外部调用一下<code>animation()</code>函数，至此，一个简单的倒计时界面完成。我们还可以给<code>canvas</code>通过<code>innerWidth</code>和<code>innerHeight</code>设置</p><p>画布大小。</p><p><code>canvas</code>可以绘制各种图形，更多内容请自行参看<code>canvas</code>内容</p><p>聊完了<code>canvas</code>，接下来就是我们的正题了。</p><h2 id="Web-Audio"><a href="#Web-Audio" class="headerlink" title="Web Audio"></a>Web Audio</h2><p>在开始之前，我们还需要了解什么是Web Audio。</p><blockquote><p>Web Audio 是 Web 端处理和分析音频的一套 API 。它可以使用户在音频上下文中进行音频操作，具有模块化路由的特点，它也使我们能够控制音频的空间化。</p></blockquote><p>通过Web Audio，我们能够实现<strong>取数据</strong>和<strong>映射数据</strong>两个过程，下面我们将实现这两个过程。</p><h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><p>我们先在页面创建一个<code>canvas</code>元素和一个<code>audio</code>标签以及一个用于作播放按钮的<code>a</code>标签。</p><p>然后在JavaScript里面获取<code>audio</code>和<code>a</code>这两个元素，并给<code>a</code>标签设置单击事件。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'play-btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> audio <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'audio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">onloadAudio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在<code>onLoadAudio()</code>函数里面，我们先获取<code>canvas</code>元素，设置它占满整个页面，再创建<code>canvas</code>的对象。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>创建 *<em>AudioContext *</em>对象，用来控制它所包含的节点的创建，以及音频处理、解码操作的执行。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> audioCtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitAudioContext<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过 <code>createAnalyser()</code> 方法创建 *<em>AnalyserNode *</em>用来获取音频时间和频率数据，实现音频数据可视化。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> analyser <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span><span class="token function">createAnalyser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        analyser<span class="token punctuation">.</span>fftSize <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span></code></pre><p>fftSize 在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize" target="_blank" rel="noopener">MDN</a> 里面介绍是快速傅里叶变换的一个参数，取值必须是从32到32768范围内的2的非零幂，默认值为2048，在这里我们取512。另外，fftSize 的值决定了 frequencyData 的长度。</p><p>将音频节点关联到 <strong>AudioContext</strong>上，作为整个音频分析的输入。</p><p>我们采用<strong>MediaElementAudioSourceNode</strong> 将<code>&lt;audio&gt;</code>节点作为输入源，并将音频关联到分析器，再将分析器关联到输出设备。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> source <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span><span class="token function">createMediaElementSource</span><span class="token punctuation">(</span>audio<span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>analyser<span class="token punctuation">)</span><span class="token punctuation">;</span>        analyser<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>audioCtx<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接下来获取频率数组。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> bufferLength <span class="token operator">=</span> analyser<span class="token punctuation">.</span>frequencyBinCount<span class="token punctuation">;</span>        <span class="token keyword">var</span> dataArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>bufferLength<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>frequencyBinCount()</code>的值是 fftSize 取值的一半，所以这里的 Uint8Array() 数组的长度就是256。</p><p>然后设置音柱的宽度，而高度只定义变量而不赋值，留在后面通过<code>dataArray[]</code>数组动态设置</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> barWidth <span class="token operator">=</span> WIDTH <span class="token operator">/</span> bufferLength<span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> barHeight<span class="token punctuation">;</span></code></pre><h3 id="绘制音柱"><a href="#绘制音柱" class="headerlink" title="绘制音柱"></a>绘制音柱</h3><p>定义一个 <code>renderFrame()</code> 函数用于绘制音柱，并且每次绘制之前都先将整个画布清除，然后更新频率数组。</p><pre><code>        ctx.clearRect(0,0,WIDTH,HEIGHT);        analyser.getByteFrequencyData(dataArray);</code></pre><p>通过<code>for</code>循环里面设置每一个矩形的高度，再根据高度设置一个背景色，然后绘制矩形，并填充背景颜色。然后通过递归的方式调用函数。</p><pre class=" language-javascript"><code class="language-javascript">        barHeight <span class="token operator">=</span> dataArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> r <span class="token operator">=</span> barHeight <span class="token operator">+</span> <span class="token number">25</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> bufferLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token number">250</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> bufferLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"rgb("</span> <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> g <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>HEIGHT<span class="token operator">-</span>barHeight<span class="token punctuation">,</span>barWidth<span class="token punctuation">,</span>barHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">+</span><span class="token operator">=</span> barWidth<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>最后，运行代码，体验属于你的可视化音乐吧。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文简单介绍了 canvas 的使用和如何通过 Web Audio 的相关 API 获取音频的频率数据。</p><p>然而 <code>canvas</code> 和 <code>Web Audio</code>的用处远远不止于此，读者还可以发挥想象力和创造力，开发出更多有意思的项目。</p><p>附上项目源码：<a href="https://github.com/anpeier/lesson_shuidi/tree/master/html5/visualize" target="_blank" rel="noopener">https://github.com/anpeier/lesson_shuidi/tree/master/html5/visualize</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
