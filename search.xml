<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue组件化开发之通用型弹出框</title>
      <link href="/2020/03/15/modal/"/>
      <url>/2020/03/15/modal/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要分享关于组件化开发的理解，让刚入门的小伙伴少走一些弯路，提高开发效率，作者本人也是新手，如有不当之处，请大佬指出，感谢。</p></blockquote><p>​        相信很多刚入门的小伙伴，经常会写很多重复的代码，而这些代码一般情况下也都是大同小异，在这种情况下，如何让开发和学习变得更加高效，组件化的思想就显得尤为重要。这里通过设计一个简单的弹出框，给小伙伴们分享组件化的应用。</p><h2 id="组件-amp-组件化"><a href="#组件-amp-组件化" class="headerlink" title="组件&amp;组件化"></a>组件&amp;组件化</h2><blockquote><p>组件化是对某些可以进行复用的功能进行封装的标准化工作。组件一般会内含自身的内部UI元素、样式和JS逻辑代码，它可以很方便的在应用的任何地方进行快速的嵌入。组件内部可以使用其他组件来构成更复杂的组件。        </p></blockquote><p>在实际的开发中，我们应该避免去编写重复的代码，将精力放在更加核心的部分，因此就需要将这些重复的代码抽取出来，封装成公共的组件，提高开发效率，但同时也要注意组件的健壮性和可复用性，让它能够尽可能适应更多的场景。</p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>首先是弹出框的基本结构</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mask"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-dialog"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-header"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>span<span class="token operator">></span>标题<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>          <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"icon-close"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-body"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-footer"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>确定<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-default"</span><span class="token operator">></span>取消<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>​        基本结构很简单，稍微注意一点的就是<code>slot</code>插槽，如果没有提供name属性，它将有一个隐含的名字default，并且在父组件如果没有指定<code>slot</code>的<code>v-slot</code>属性的话，内容会传给default插槽。</p><p>​        在这里定义了<code>slot</code>的name属性<code>body</code>，这种的叫做具名插槽，会匹配<code>v-slot:body</code>的内容。</p><p><strong>注意</strong>，在父组件中调用需要用<code>&lt;template&gt;</code>包裹，并且<code>&lt;template&gt;</code> 元素中的所有内容都将被传入相应的插槽。</p><p>给弹出框加点样式</p><pre class=" language-scss"><code class="language-scss"><span class="token selector">.modal </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token selector">.mask </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000000</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.modal-dialog </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">40%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">560</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token selector">.modal-header </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F5F5F5</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">25</span>px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>      <span class="token selector">.icon-close </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">23</span>px<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">"/static/img/icon-close.png"</span><span class="token punctuation">)</span> no-repeat center<span class="token punctuation">;</span>        <span class="token property">background-size</span><span class="token punctuation">:</span> contain<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector">.modal-body </span><span class="token punctuation">{</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">42</span>px <span class="token number">40</span>px <span class="token number">54</span>px<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.modal-footer </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">82</span>px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">82</span>px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F5F5F5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我这里使用的是<code>scss</code>，使用的时候别忘了安装<code>node-sass</code>和<code>sass-loader</code>，现在我们的页面是这个样子了</p><p><img src="/2020/03/15/modal/1582812082126.png" alt=""></p><p>虽然还是不太美观，但是已经基本上是一个弹出框的雏形了，并且我没有给<code>a</code>标记样式，原因在后面。</p><h2 id="SCSS函数"><a href="#SCSS函数" class="headerlink" title="SCSS函数"></a>SCSS函数</h2><p>回过头再看看上面的<code>css</code>代码，这里重复写了4次固定定位的代码，而且随着项目的推进，肯定还有更多类似的代码，何不将这些部分抽取出来，进行封装呢？<code>scss</code>提供了这个功能，将<code>css</code>封装成函数，这里的函数直接会返回函数体。我们在遇到类似的情况时，就能够直接复用。</p><p>在<code>assets</code>目录下新建<code>scss</code>文件夹并在里面新建<code>mixin.scss</code>，在里面新建<code>position</code>函数,代码如下：</p><pre class=" language-scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$pos</span></span><span class="token punctuation">:</span> absolute, <span class="token property"><span class="token variable">$top</span></span><span class="token punctuation">:</span> <span class="token number">0</span>, <span class="token property"><span class="token variable">$left</span></span><span class="token punctuation">:</span> <span class="token number">0</span>, <span class="token property"><span class="token variable">$w</span></span><span class="token punctuation">:</span> <span class="token number">100%</span>, <span class="token property"><span class="token variable">$h</span></span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> <span class="token variable">$pos</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token variable">$top</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token variable">$left</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$w</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$h</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着我们引入<code>mixin.scss</code>，用<code>position</code>函数替换我们原先的代码</p><p>通过@include方式使用<code>scss</code>函数：<code>@include position(fixed);</code>括号里面的是参数。</p><h2 id="关于按钮"><a href="#关于按钮" class="headerlink" title="关于按钮"></a>关于按钮</h2><p>每一个网站都有很多按钮，不过，同一个网站的按钮风格大多都是一样，无非是大小不一。因此可以单独在<code>scss</code>文件下新建<code>button.scss</code>然后在<code>App.vue</code>里面引入这个文件，在后面除了一些特别的样式，其它就不需要给按钮定义样式了，这样也便于维护。这里给出我的<code>button</code>文件，可以参考一下。</p><pre class=" language-scss"><code class="language-scss"><span class="token selector">.btn </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">110</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF6600</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.btn-default </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#b0b0b0</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#d7d7d7</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.btn-large </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">202</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.btn-huge </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">54</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">54</span>px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.btn-group </span><span class="token punctuation">{</span>  <span class="token selector">.btn </span><span class="token punctuation">{</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token selector"><span class="token parent important">&amp;</span>:last-child </span><span class="token punctuation">{</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="为了复用"><a href="#为了复用" class="headerlink" title="为了复用"></a>为了复用</h2><p>当前这个弹出框还只是一个固定的结构，它并不能在其他地方复用，需要进行一些处理，将所有可变部分抽取出来，例如标题，按钮，内容。因为有插槽，所以内容就不用考虑，需要关注的是标题和按钮，因为标题有可能是提示，警告等等，按钮也有可能是确定、取消的一个或两个都有。而这些信息都是从父组件传递过来，需要用<code>props</code>接收。</p><p>在<code>props</code>里面添加如下代码，并给某些属性指定默认值：</p><pre class=" language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 弹框标题</span>    title<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 按钮类型： 1：确定按钮 2：取消按钮 3：确定取消</span>    btnType<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 按钮文本</span>    sureText<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">"确定"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    cancleText<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">"取消"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    showModal<span class="token punctuation">:</span> Boolean  <span class="token punctuation">}</span></code></pre><p>添加完之后，还需重新改写代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal"</span> v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"showModal"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mask"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-dialog"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-header"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>          <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"icon-close"</span> @click<span class="token operator">=</span><span class="token string">"$emit('cancle')"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-body"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-footer"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"btnType==1"</span>@click<span class="token operator">=</span><span class="token string">"$emit('submit')"</span><span class="token punctuation">{</span><span class="token punctuation">{</span>sureText<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"btnType==2"</span>@click<span class="token operator">=</span><span class="token string">"$emit('cancle')"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>cancleText<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn-group"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"btnType==3"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> @click<span class="token operator">=</span><span class="token string">"$emit('submit')"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>sureText<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-default"</span> @click<span class="token operator">=</span><span class="token string">"$emit('submit')"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>cancleText<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>通过父组件传递的参数，来实现代码的重用，并且使用<code>$emit</code>来向外抛出自定义事件，然后在父组件实现自己的业务逻辑。</p><p>在<code>Home.vue</code>里面引入这个组件并调用</p><pre class=" language-vue"><code class="language-vue"><modal    title="小星星"    sureText="确定"    btnType="1"    :showModal="showModal"    @submit="go"    @cancle="showModal=false"  >    <template v-slot:body>      <p>给个小星星吧</p>    </template>  </modal></code></pre><p>这里的<code>@submit</code>和<code>@cancle</code>就是我们在组件里面自定义的事件</p><p>最终效果如下</p><p><img src="/2020/03/15/modal/1582817318496.png" alt=""></p><p>实现完之后，感觉有点弹出时生硬，没关系，我们给它加点动画，在css3中有<code>transform</code>和<code>transition</code>可以实现动画效果，但是我们这里使用<code>vue</code>内置组件<code>&lt;transition&gt;</code>，让弹出框有一个从上面弹出的效果。</p><h3 id="transition组件"><a href="#transition组件" class="headerlink" title="transition组件"></a>transition组件</h3><p><code>transition</code>组件可以为元素或组件添加过渡效果，只会把过渡效果应用到其包裹的内容上，而不会额外渲染 DOM 元素，也不会出现在可被检查的组件层级中。它可以通过多种方式进行过渡，在这里应用 class的方式过渡。</p><p><img src="/2020/03/15/modal/1582818161284.png" alt=""></p><p>这幅图是<code>Vue</code>官方给出的图，简单来说，v-enter是动画开始的状态，v-enter-active进入过渡生效时的状态,v-enter-to是过渡的结束状态，leave同理，具体细节大家可以去<a href="Vue官网">https://cn.vuejs.org/v2/guide/transitions.html#%E6%A6%82%E8%BF%B0</a>查看。</p><p>当没有指定<transition>的name属性时，过渡的类名会默认以v作为前缀，这里给transition指定name为</transition></p><p>slide并用它包裹modal组件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>transition name<span class="token operator">=</span><span class="token string">"slide"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal"</span> v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"showModal"</span><span class="token operator">></span>        <span class="token operator">...</span>        <span class="token operator">...</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span></code></pre><p>在style代码里面modal后面加上</p><pre class=" language-scss"><code class="language-scss">  <span class="token selector"><span class="token parent important">&amp;</span>.slide-enter-active </span><span class="token punctuation">{</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token parent important">&amp;</span>.slide-leave-active </span><span class="token punctuation">{</span>    <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token parent important">&amp;</span>.slide-enter </span><span class="token punctuation">{</span>    <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>并且给modal指定需要过渡的属性</p><pre class=" language-scss"><code class="language-scss"><span class="token property">transition</span><span class="token punctuation">:</span> top <span class="token number">0.5</span>s<span class="token punctuation">;</span></code></pre><p>加完这个之后，弹出框就会有一个滑上滑下的动画啦。</p><p>到此，我们的弹出框就完成啦。</p><p>你也可以根据自己的需求去做适当的调整，开发出适合自己项目的弹出框。</p><h2 id="做成插件"><a href="#做成插件" class="headerlink" title="做成插件"></a>做成插件</h2><p>每次在用这个弹出框的时候，还需要引入组件，也显得有点麻烦，因此，可以将其做成插件，能够全局调用，而不需要去引入。</p><p>在当前目录下新建index.js，通过使用install方法将其全局注册</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Modal <span class="token keyword">from</span> <span class="token string">'./Modal.vue'</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>    install<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'Modal'</span><span class="token punctuation">,</span> Modal<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> component</code></pre><p>在main.js引入，并通过Vue.use()来全局使用，这样就能像其他ui库一样去使用它而不需要每次引入。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在实际开发中，组件化是尤为重要的，它能够帮助我们写出更高质量的代码，也能够让我们的代码更易于维护，尽早的树立组件化的思想，对写代码也是非常有帮助的。</p><p>本文只是对组件化的简单理解，有不对的地方，欢迎大佬指出。</p><p>感谢评论区大佬的点拨。</p><h4 id="希望看完的朋友可以给个赞，鼓励一下"><a href="#希望看完的朋友可以给个赞，鼓励一下" class="headerlink" title="希望看完的朋友可以给个赞，鼓励一下"></a>希望看完的朋友可以给个赞，鼓励一下</h4><p>附上<a href="Github源码">https://github.com/anpeier/shop-online/blob/master/src/components/Modal.vue</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 组件化思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速上手网易云音乐可视化</title>
      <link href="/2019/11/23/visualize/"/>
      <url>/2019/11/23/visualize/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是音频可视化"><a href="#什么是音频可视化" class="headerlink" title="什么是音频可视化"></a>什么是音频可视化</h2><blockquote><p>音频可视化，顾名思义，就是通过获取音频的波形、频率和其他来自音频的数据转换成图像，再到屏幕上显示出来。通过它，我们能够制作一些炫酷的前端音乐界面。</p></blockquote><p>下面，我将分析一个来自<a href="https://juejin.im/post/5d8c122be51d4578176b4b2b" target="_blank" rel="noopener">云音乐技术团队的音频可视化开发案例</a>，快速帮助小白，制作自己喜欢的炫酷的音频可视化界面。</p><p>先上图</p><p><img src="/2019/11/23/visualize/1.png" alt=""></p><p>想开发这么一个炫酷的音频界面，我们可以先来聊聊 <strong>canvas</strong></p><h2 id="canvas是什么"><a href="#canvas是什么" class="headerlink" title="canvas是什么"></a>canvas是什么</h2><p><strong>canvas</strong>是HTML5中用于图形绘制的容器元素，它通常通过JavaScript脚本来完成图形绘制。要完成我们下面的音频可视化开发，我们可以借组结构canvas的几个方法，下面将通过开发一个页面倒计时的小案例来帮助初学者了解canvas的一些属性和方法。</p><p>先上代码</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>canvas id<span class="token operator">=</span><span class="token string">"myCanvas"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"50px Verdana"</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> dis <span class="token operator">=</span> <span class="token number">550</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>dis <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token operator">--</span>dis<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token operator">%</span><span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                    ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>我们在<code>html</code>页面创建一个<code>canvas</code>画布元素并设置id为<code>myCanvas</code>，它的默认大小是300*150，创建好了这块画布，接下来我们就能在JavaScript脚本中绘制图形了。</p><p>先通过<code>getElementById()</code>找到这个元素，然后创建canvas对象<code>ctx</code>并设置填充色为红色，字体为Verdana，大小为50px，设置<code>dis</code>变量用于条件控制，再定义一个<code>i</code>变量用于显示倒计时数字，然后我们就可以开始在我们的画布里绘制倒计时数字了。</p><p>创建一个<code>animation</code>函数，在这个函数里面，我们使用了一个html5专门用于请求动画的API<code>requestAnimationFrame</code>请求动画帧，相比于定时器<code>setTimeout</code>，它不会引起丢帧、丢帧，看起来更加流畅。</p><p>在<code>requestAnimationFrame</code>里面，先设置刷帧条件<code>dis&gt;=0</code>，<code>dis</code>每次减一，总共550次，再设置条件为每50次执行一次绘制操作，在每次绘制之前，通过<code>clearRect(x,y,width,height)</code>方法将画布上给定矩形清空，它的4个参数分别表示要清除的矩形左上角的x，y坐标，以及要清空矩形的宽度和高度，单位以像素计算。然后再通过<code>fillText()</code>画布指定位置绘制倒计时数字,该方法接收四个参数：<code>text</code>输出的文本，<code>x</code>绘制文本的x坐标，<code>y</code>绘制文本的y坐标，注意：这两个值都是相对于画布，最后一个参数<code>maxWidth</code>表示允许文本的最大宽度，它是一个可选参数。</p><p>接着我们通过递归的方式调用<code>animation()</code>函数直到倒计时结束，最后在外部调用一下<code>animation()</code>函数，至此，一个简单的倒计时界面完成。我们还可以给<code>canvas</code>通过<code>innerWidth</code>和<code>innerHeight</code>设置</p><p>画布大小。</p><p><code>canvas</code>可以绘制各种图形，更多内容请自行参看<code>canvas</code>内容</p><p>聊完了<code>canvas</code>，接下来就是我们的正题了。</p><h2 id="Web-Audio"><a href="#Web-Audio" class="headerlink" title="Web Audio"></a>Web Audio</h2><p>在开始之前，我们还需要了解什么是Web Audio。</p><blockquote><p>Web Audio 是 Web 端处理和分析音频的一套 API 。它可以使用户在音频上下文中进行音频操作，具有模块化路由的特点，它也使我们能够控制音频的空间化。</p></blockquote><p>通过Web Audio，我们能够实现<strong>取数据</strong>和<strong>映射数据</strong>两个过程，下面我们将实现这两个过程。</p><h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><p>我们先在页面创建一个<code>canvas</code>元素和一个<code>audio</code>标签以及一个用于作播放按钮的<code>a</code>标签。</p><p>然后在JavaScript里面获取<code>audio</code>和<code>a</code>这两个元素，并给<code>a</code>标签设置单击事件。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'play-btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> audio <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'audio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">onloadAudio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在<code>onLoadAudio()</code>函数里面，我们先获取<code>canvas</code>元素，设置它占满整个页面，再创建<code>canvas</code>的对象。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>创建 *<em>AudioContext *</em>对象，用来控制它所包含的节点的创建，以及音频处理、解码操作的执行。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> audioCtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitAudioContext<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过 <code>createAnalyser()</code> 方法创建 *<em>AnalyserNode *</em>用来获取音频时间和频率数据，实现音频数据可视化。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> analyser <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span><span class="token function">createAnalyser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        analyser<span class="token punctuation">.</span>fftSize <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span></code></pre><p>fftSize 在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize" target="_blank" rel="noopener">MDN</a> 里面介绍是快速傅里叶变换的一个参数，取值必须是从32到32768范围内的2的非零幂，默认值为2048，在这里我们取512。另外，fftSize 的值决定了 frequencyData 的长度。</p><p>将音频节点关联到 <strong>AudioContext</strong>上，作为整个音频分析的输入。</p><p>我们采用<strong>MediaElementAudioSourceNode</strong> 将<code>&lt;audio&gt;</code>节点作为输入源，并将音频关联到分析器，再将分析器关联到输出设备。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> source <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span><span class="token function">createMediaElementSource</span><span class="token punctuation">(</span>audio<span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>analyser<span class="token punctuation">)</span><span class="token punctuation">;</span>        analyser<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>audioCtx<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接下来获取频率数组。</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> bufferLength <span class="token operator">=</span> analyser<span class="token punctuation">.</span>frequencyBinCount<span class="token punctuation">;</span>        <span class="token keyword">var</span> dataArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>bufferLength<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>frequencyBinCount()</code>的值是 fftSize 取值的一半，所以这里的 Uint8Array() 数组的长度就是256。</p><p>然后设置音柱的宽度，而高度只定义变量而不赋值，留在后面通过<code>dataArray[]</code>数组动态设置</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> barWidth <span class="token operator">=</span> WIDTH <span class="token operator">/</span> bufferLength<span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> barHeight<span class="token punctuation">;</span></code></pre><h3 id="绘制音柱"><a href="#绘制音柱" class="headerlink" title="绘制音柱"></a>绘制音柱</h3><p>定义一个 <code>renderFrame()</code> 函数用于绘制音柱，并且每次绘制之前都先将整个画布清除，然后更新频率数组。</p><pre><code>        ctx.clearRect(0,0,WIDTH,HEIGHT);        analyser.getByteFrequencyData(dataArray);</code></pre><p>通过<code>for</code>循环里面设置每一个矩形的高度，再根据高度设置一个背景色，然后绘制矩形，并填充背景颜色。然后通过递归的方式调用函数。</p><pre class=" language-javascript"><code class="language-javascript">        barHeight <span class="token operator">=</span> dataArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> r <span class="token operator">=</span> barHeight <span class="token operator">+</span> <span class="token number">25</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> bufferLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token number">250</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> bufferLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"rgb("</span> <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> g <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>HEIGHT<span class="token operator">-</span>barHeight<span class="token punctuation">,</span>barWidth<span class="token punctuation">,</span>barHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">+</span><span class="token operator">=</span> barWidth<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>最后，运行代码，体验属于你的可视化音乐吧。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文简单介绍了 canvas 的使用和如何通过 Web Audio 的相关 API 获取音频的频率数据。</p><p>然而 <code>canvas</code> 和 <code>Web Audio</code>的用处远远不止于此，读者还可以发挥想象力和创造力，开发出更多有意思的项目。</p><p>附上项目源码：<a href="https://github.com/anpeier/lesson_shuidi/tree/master/html5/visualize" target="_blank" rel="noopener">https://github.com/anpeier/lesson_shuidi/tree/master/html5/visualize</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
